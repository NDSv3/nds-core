/**

@mainpage


Nominal Device Support (NDS) is a software context that allows write standardized device drivers for data acquisition, image acquisition, and timing devices using a user-defined tree-like structure. The NDS framework allows the user to write this device support for a variety of Control Systems (CS) by hiding the details of the chosen CS and focusing on the device functionalities. NDS has two different approaches: NDS v2 and v3. The former is oriented directly to writing EPICS Device Support using the asynDriver interface. This approach is deprecated. The latter defines a two-layer methodology enabling the implementation of the Device Driver and the interface with any software application. In the scope of this document, NDS always refers to NDS v3.
It is necessary to highlight some basic concepts to understand the NDS standardized methodology to implement device supports:
- An NDS Device Driver is organized as a set of objects in a tree-like structure.
- The developer is responsible for defining the tree-like structure, trying to find the best fit for the requirements when implementing a Device Driver. This structure will always be related to the functional analysis of the device, but it does not have to be a direct mapping.
- The essential elements can be classified as Nodes and Process Variables (PVs). Note that, in this context, when talking about PVs, we are referring to NDS-PVs (the C++ Class implementation). These PVs closely relate to the EPICS-PVs, but they are not the same thing.
- Nodes are elements used to organize the device components and functionalities in the tree-like structure. There are many different node types, classified according to their functionality and to their role in a Device Driver. Many different nodes are already implemented, and the user only needs to add instances to the specific Device Driver implementation.
- NDS PVs are variables that are visible from the Device Driver and from the clients connected through the control system. There are different NDS PVs according to the functionality of the node they are connected to.
- The basic elements, developed to implement NDS Device Drivers, are included in a software package named NDS-Core. This software element includes the header files and the binary code (as a library) needed to implement Device Drivers. The NDS-Core software package is not part of the CODAC Core System, and the user needs to install it.
- An NDS Device Driver can be used by any control system provided by the user. An example of the test code using the minimal basic control system for testing purposes is available in /opt/codac/examples/nds3. These examples will link to the nds3-testcontrolsystem library.
- When using a Device Driver with EPICS, the interface is done through the NDS-EPICS software layer, using asynDriver. This interface with EPICS through asynDriver is provided as a separate CODAC Core System package.
- NDS Device drivers use the timespec data type using UTC format.



*/
